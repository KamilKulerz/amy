# Generated by Django 2.2.17 on 2021-06-14 12:34

from collections import defaultdict
from typing import Optional

from django.db import migrations

from consents.models import TermOption


def copy_may_contact(Consent, old_consent, may_contact_agree, may_contact_disagree):
    option = may_contact_agree if old_consent.person.may_contact else may_contact_disagree
    Consent.reconsent(old_consent, option)

def copy_public_profile(Consent, old_consent, public_profile_agree, public_profile_disagree):
    option = public_profile_agree if old_consent.person.publish_profile else public_profile_disagree
    Consent.reconsent(old_consent, option)

def copy_privacy_policy(Consent, old_consent, privacy_policy_agree):
    if old_consent.person.data_privacy_agreement:
        Consent.reconsent(old_consent, privacy_policy_agree)

def copy_privacy_policy(Consent, old_consent, may_publish_name_disagree, may_publish_name_github, may_publish_name_profile, may_publish_name_orcid):
    old_option = old_consent.person.lesson_publication_consent
    option: Optional[TermOption] = None
    if old_option == "yes-profile":
        option = may_publish_name_profile
    if old_option == "yes-orcid":
        option = may_publish_name_orcid
    if old_option == "yes-github":
        option = may_publish_name_github
    if old_option == "no":
        option = may_publish_name_disagree
    
    if option:
        Consent.reconsent(old_consent, option)


def copy_old_consent_data(apps, schema_editor):
    """
    Copy consent information from the Person model
    to the Consent model.
    """
    Person = apps.get_model('workshops', 'Person')
    Consent = apps.get_model('consents', 'Consent')
    Term = apps.get_model('consents', 'Term')
    TermOption = apps.get_model('consents', 'TermOption')
    people = Person.objects.all() # TODO should just be the same
    consents = Consent.objects.active().filter(person__in=people).select_related("person")
    

    terms = Term.objects.active().filter(slug__in=["may-contact"]).prefetch_active_options()
    term_slug_by_terms = {term.slug: term for term in terms}


    privacy_policy = term_slug_by_terms["privacy-policy"]
    privacy_policy_agree = privacy_policy.options[0]


    may_contact = term_slug_by_terms["may_contact"]
    for option in may_contact.options:
        if option.option_type == TermOption.AGREE:
            may_contact_agree = option
        if option.option_type == TermOption.DECLINE:
            may_contact_disagree = option

    public_profile = term_slug_by_terms["public-profile"]
    for option in public_profile.options:
        if option.option_type == TermOption.AGREE:
            public_profile_agree = option
        if option.option_type == TermOption.DECLINE:
            public_profile_disagree = option

    may_publish_name = term_slug_by_terms["may-publish-name"]
    for option in may_publish_name.options:
        if option.option_type ==  TermOption.DECLINE:
            may_publish_name_disagree = option
        if "only use my GitHub Handle" in option.content:
            may_publish_name_github = option
        if "use the name associated with my profile" in option.content:
            may_publish_name_profile = option
        if "use the name associated with my ORCID profile" in option.content:
            may_publish_name_orcid = option

    for old_consent in consents:
        if old_consent.term_id == may_contact.id:
            copy_may_contact(Consent, old_consent, may_contact_agree, may_contact_disagree)
        if old_consent.term_id == public_profile.id:
            copy_public_profile(Consent, old_consent, public_profile_agree, public_profile_disagree)
        if old_consent.term_id == privacy_policy.id:
            copy_privacy_policy(Consent, old_consent, privacy_policy_agree)
        if old_consent.term_id == may_publish_name.id:
            copy_privacy_policy(Consent, old_consent, may_publish_name_disagree, may_publish_name_github, may_publish_name_profile, may_publish_name_orcid)
   
class Migration(migrations.Migration):

    dependencies = [
        ('consents', '0005_auto_20210411_2325'),
    ]

    operations = [
        migrations.RunPython(copy_old_consent_data),
    ]

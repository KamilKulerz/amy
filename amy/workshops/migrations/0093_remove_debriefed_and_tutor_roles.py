# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-26 11:08
from __future__ import unicode_literals

from django.db import migrations


def remove_debriefed_role(apps, schema_editor):
    Role = apps.get_model('workshops', 'Role')
    Task = apps.get_model('workshops', 'Task')

    try:
        role = Role.objects.get(name='debriefed')
    except Role.DoesNotExist:
        pass
    else:
        role.delete()
        # Tasks with role=debriefed will be also deleted.


def remove_tutor_role(apps, schema_editor):
    Role = apps.get_model('workshops', 'Role')
    Task = apps.get_model('workshops', 'Task')

    try:
        tutor = Role.objects.get(name='tutor')
    except Role.DoesNotExist:
        pass
    else:
        try:
            instructor = Role.objects.get(name='instructor')
        except Role.DoesNotExist:
            raise Exception("Cannot safely delete `tutor` role, because "
                            "there is no `instructor` role in the database.")
        else:
            Task.objects.filter(role=tutor).update(role=instructor)
            tutor.delete()


def create_debriefed_role(apps, schema_editor):
    Role = apps.get_model('workshops', 'Role')
    Role.objects.create(name='debriefed')


def create_tutor_role(apps, schema_editor):
    Role = apps.get_model('workshops', 'Role')
    Role.objects.create(name='tutor')


class Migration(migrations.Migration):

    dependencies = [
        ('workshops', '0087_renaming_column_repository_tags_squashed_0092_alter_help_text_of_metadata_changed'),
    ]

    operations = [
        migrations.RunPython(remove_debriefed_role, reverse_code=create_debriefed_role),
        migrations.RunPython(remove_tutor_role, reverse_code=create_tutor_role),
    ]
